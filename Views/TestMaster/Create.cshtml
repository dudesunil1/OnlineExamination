@model OnlineExamination.Models.TestMasterModel
@{
    ViewBag.Title = "Create Test";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<html lang="en">
<head>

    <style>
        /* Dropdown container styles */
        .dropdown {
            position: relative;
            width: 200px;
            border: 1px solid #ccc;
            padding: 5px;
        }

        .search-box {
            width: 100%;
            padding: 5px;
            margin-bottom: 5px;
            box-sizing: border-box;
        }

        .dropdown-list {
            list-style: none;
            padding: 0;
            margin: 0;
            border: 1px solid #ccc;
            max-height: 200px;
            overflow-y: auto;
            position: absolute;
            width: 100%;
            top: 30px; /* Adjust depending on the search box height */
            background-color: white;
            display: none; /* Hidden initially */
            z-index: 1000;
        }

            .dropdown-list li {
                padding: 5px;
            }

                .dropdown-list li:hover {
                    background-color: #f0f0f0;
                }

            .dropdown-list input[type="checkbox"] {
                margin-right: 10px;
            }
    </style>
</head>

<body>
    <div class="container mt-4">
        <h2>Create Test</h2>
        <hr />

        <!-- Tab navigation -->
        <ul class="nav nav-tabs" id="testTabs" role="tablist">
            <li class="nav-item">
                <button class="nav-link @((ViewBag.ActiveTab == "test-details") ? "active" : "")" id="test-details-tab" data-bs-toggle="tab" data-bs-target="#test-details" type="button" role="tab" aria-controls="test-details" aria-selected="true">Test Details</button>
            </li>
            <li class="nav-item">
                <button class="nav-link @((ViewBag.ActiveTab == "question-details") ? "active" : "")" id="question-details-tab" data-bs-toggle="tab" data-bs-target="#question-details" type="button" role="tab" aria-controls="question-details" aria-selected="false">Question Details</button>
            </li>
            <li class="nav-item">
                <button class="nav-link @((ViewBag.ActiveTab == "paper-details") ? "active" : "")" id="paper-details-tab" data-bs-toggle="tab" data-bs-target="#paper-details" type="button" role="tab" aria-controls="paper-details" aria-selected="false">Question Paper Test Details</button>
            </li>
        </ul>

        <!-- Tab content -->
        <div class="tab-content" id="testTabContent">
            <!-- Test Details Tab -->
            <div class="tab-pane @((ViewBag.ActiveTab == "test-details") ? "active" : "")" id="test-details" role="tabpanel" aria-labelledby="test-details-tab">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="row g-20">
                        <!-- Test Name -->
                        <div class="col-sm-6">
                            <label class="h5 mb-8 fw-semibold font-heading">
                                @Html.LabelFor(model => model.Test_Name)
                                <span class="text-13 text-gray-400 fw-medium">(Required)</span>
                            </label>
                            <div class="position-relative">
                                @Html.TextBoxFor(model => model.Test_Name, new { @class = "form-control py-11" })
                                @Html.ValidationMessageFor(model => model.Test_Name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <!-- Test Type -->
                        <div class="col-sm-6">
                            <label class="h5 mb-8 fw-semibold font-heading">
                                @Html.LabelFor(model => model.Test_TypeId)
                            </label>
                            <div class="position-relative">
                                @Html.DropDownListFor(
                                    model => model.Test_TypeId,
                                    new SelectList(ViewBag.Testtypelist, "Value", "Text"),
                                    "Select a Test Type", // Placeholder text for the first option
                                    new { @class = "form-control py-11" }
                                )
                                @Html.ValidationMessageFor(model => model.Test_TypeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-sm-12">
                            <label class="h5 mb-8 fw-semibold font-heading">
                                Duration (in minutes)
                            </label>
                            <div class="position-relative">
                                <input type="number" id="Duration" name="Test_Duration" class="form-control py-11" min="1" placeholder="Enter duration in minutes" />
                            </div>
                        </div>

                        <div class="col-sm-6">
                            <label class="h5 mb-8 fw-semibold font-heading">
                                Start Time
                            </label>
                            <div class="position-relative">
                                <input type="time" id="StartTime" name="Test_StartTime" class="form-control py-11" />
                            </div>
                        </div>

                        <div class="col-sm-6">
                            <label class="h5 mb-8 fw-semibold font-heading">
                                End Time
                            </label>
                            <div class="position-relative">
                                <input type="time" id="EndTime" name="Test_EndTime" class="form-control py-11" readonly />
                            </div>
                        </div>

                        <div class="col-sm-6">
                            <label class="h5 mb-8 fw-semibold font-heading">Class</label>
                            <div class="position-relative">
                                <select name="Class" id="Class" class="form-control py-11">
                                    <option value="" selected disabled>Select a Class</option>
                                    @foreach (var item in ViewBag.ClassList as List<SelectListItem>)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                </select>
                                <span class="text-danger" id="ClassValidation"></span>
                            </div>
                        </div>

                        <!-- Subject Checkbox List -->
                        <div class="col-sm-6 mt-3">
                            <label class="h5 mb-8 fw-semibold font-heading">Subjects</label>
                            <div id="SubjectsContainer">
                                @if (ViewBag.SubjectList != null)
                                {
                                    foreach (var subject in ViewBag.SubjectList as List<SelectListItem>)
                                    {
                                        <div class="form-check">
                                            <input class="form-check-input subject-checkbox" type="checkbox" name="SelectedSubjects" id="subject_@subject.Value" value="@subject.Value">
                                            <label class="form-check-label" for="subject_@subject.Value">
                                                @subject.Text
                                            </label>

                                            <!-- Hidden TextBox for No of Questions (will be shown when checkbox is selected) -->
                                            <div id="questionBox_@subject.Value" class="form-group" style="display: none;">
                                                <label for="NoOfQuestions_@subject.Value">Enter Number of Questions</label>
                                                <input type="number" name="NoOfQuestions_@subject.Value" id="NoOfQuestions_@subject.Value" class="form-control py-11" min="1" />
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p>No subjects available.</p>
                                }
                            </div>
                        </div>

                        <div class="col-sm-12 d-flex justify-content-end gap-8">
                            <input type="submit" name="Action" value="Back To List" class="btn btn-outline-main rounded-pill py-9" />
                            <input type="submit" name="Action" value="Cancel" class="btn btn-outline-main rounded-pill py-9" onclick="openInNewTab(event)" />
                            <input type="submit" name="Action" value="Create" class="btn btn-main rounded-pill py-9" />
                        </div>
                    </div>
                }
            </div>
            <div class="tab-pane @((ViewBag.ActiveTab == "question-details") ? "show active" : "")" id="question-details" role="tabpanel" aria-labelledby="question-details-tab">
                @using (Html.BeginForm("QuestionDetails", "TestMaster"))
                {
                    @Html.AntiForgeryToken()

                    <div class="row g-20">
                        <!-- Test Name -->
                        <div class="col-sm-6">
                            <label class="h5 mb-8 fw-semibold font-heading">Select Subject</label>

                            @Html.DropDownList("Subject", (IEnumerable<SelectListItem>)ViewBag.SubjectDropdown,
                             "Select a Subject", new { @class = "form-control", id = "ddSubjectId" })
                        </div>
                    </div>


                    <div class="form-group">

                        <div class="col-md-10">

                            <div class="dropdown">
                                <input type="text" id="search-box" placeholder="Search options..." class="search-box">
                                <ul id="dropdown-list" class="dropdown-list">
                                    <li><label><input type="checkbox" value="1"> Option 1</label></li>
                                    <li><label><input type="checkbox" value="2"> Option 2</label></li>
                                    <li><label><input type="checkbox" value="3"> Option 3</label></li>
                                    <li><label><input type="checkbox" value="4"> Option 4</label></li>
                                    <li><label><input type="checkbox" value="5"> Option 5</label></li>
                                </ul>
                            </div>



                        </div>
                    </div>



                }


            </div>


        </div>
    </div>
    
    <script>
        $(document).ready(function () {
            // Show or hide the dropdown when clicking on the input field
            $('#search-box').on('focus', function () {
                $('#dropdown-list').show();
            });

            // Close dropdown when clicking outside of it
            $(document).on('click', function (event) {
                if (!$(event.target).closest('.dropdown').length) {
                    $('#dropdown-list').hide();
                }
            });

            // Filter the dropdown list as the user types in the search box
            $('#search-box').on('keyup', function () {
                var searchText = $(this).val().toLowerCase();
                $('#dropdown-list li').each(function () {
                    var optionText = $(this).text().toLowerCase();
                    $(this).toggle(optionText.includes(searchText));
                });
            });

            // Handle checkbox selection
            $('#dropdown-list input[type="checkbox"]').on('change', function () {
                var selectedValues = [];
                $('#dropdown-list input[type="checkbox"]:checked').each(function () {
                    selectedValues.push($(this).val());
                });
                console.log("Selected values:", selectedValues); // Handle selected values
            });
        });
        }
    </script>

   

        <script>

           


            document.addEventListener("DOMContentLoaded", function () {
                // Listen for checkbox changes
                const checkboxes = document.querySelectorAll('.subject-checkbox');

                checkboxes.forEach(function (checkbox) {
                    checkbox.addEventListener('change', function () {
                        var subjectValue = this.value;
                        var questionBox = document.getElementById('questionBox_' + subjectValue);
                        var questionInput = document.getElementById('NoOfQuestions_' + subjectValue);

                        // Show or hide the question box based on checkbox state
                        if (this.checked) {
                            // Show the text box
                            questionBox.style.display = 'block';
                        } else {
                            // Hide the text box and reset the input value
                            questionBox.style.display = 'none';
                            questionInput.value = '';  // Reset the input field value
                        }
                    });
                });
            });
        function addMinutesToTime(timeStr, minutes)
        {
        const timeParts = timeStr.split(':');
        let hours = parseInt(timeParts[0]);
        let minutesPart = parseInt(timeParts[1]);

        minutesPart += minutes; // Add the duration to minutes part

        // Handle overflow of minutes
        while (minutesPart >= 60)
        {
        minutesPart -= 60;
        hours++;
        }

        // Handle overflow of hours (24-hour format)
        if (hours >= 24)
        {
        hours -= 24;
        }

        // Ensure two-digit formatting
        return `${ String(hours).padStart(2, '0')}:${ String(minutesPart).padStart(2, '0')}`;
        }

        // Listen for changes on Start Time and Duration
        document.getElementById('StartTime').addEventListener('change', function() {
        updateEndTime();
        });

        document.getElementById('Duration').addEventListener('input', function() {
        updateEndTime();
        });

        // Function to update the End Time field
        function updateEndTime()
        {
        const startTime = document.getElementById('StartTime').value;
        const duration = parseInt(document.getElementById('Duration').value);

        // Check if both start time and duration are provided
        if (startTime && !isNaN(duration) && duration > 0)
        {
        const endTime = addMinutesToTime(startTime, duration);
        document.getElementById('EndTime').value = endTime;
        }
        }



        document.querySelectorAll("[id^='NoOfQuestions_']").forEach(input => {
        input.addEventListener("input", function() {
        // Extract the subject ID from the input field's ID
        var subjectId = this.id.split('_')[1];

        // Get the number of questions entered by the user (default to 0 if empty)
        var numQuestions = this.value || 0;

        // Check if the checkbox for the subject is checked
        var isChecked = document.getElementById("subject_" + subjectId).checked;

        // Fetch the subject name from the dropdown
        var subjectName = getSubjectNameById(subjectId);

        // Update the session with subject details (ID, name, checked state, and number of questions)
        updateSessionData(subjectId, isChecked, numQuestions, subjectName);
        });
        });

        function getSubjectNameById(subjectId)
        {
        // Find the checkbox by subjectId
        var checkbox = document.getElementById('subject_' + subjectId);

        // If the checkbox exists, get its associated label text
        if (checkbox)
        {
        // Find the label associated with the checkbox
        var label = checkbox.nextElementSibling; // assuming the label is immediately after the checkbox
        if (label)
        {
        return label.textContent.trim(); // Return the text content of the label
        }
        }

        return ''; // Return an empty string if subjectId is not found
        }
        // Function to update session data (with the subject name, id, checked state, and number of questions)


        function updateSessionData(subjectId, isChecked, numQuestions, subjectName)
        {
        $.ajax({
        type: "POST",
        url: '@Url.Action("StoreSelectedSubjects", "TestMaster")', // Adjust this URL as needed
        data:
        {
        subjectId: subjectId,
        isChecked: isChecked,
        numQuestions: numQuestions,
        subjectName: subjectName // Adding Subject Name to the data sent to the server
        },
        success: function(response) {
        console.log("Selected subject data updated in session");
        },
        error: function(error) {
        console.error("Error updating session", error);
        }
        });
        }



        document.addEventListener('DOMContentLoaded', function ()
        {
        // Listen for the click on the 'Create' button
        document.getElementById('Create').addEventListener('click', function(event) {

        if (validateForm())
        {
        // Prevent the default form submission to allow switching the tab
        event.preventDefault();

        // Switch to the "question-details" tab
        switchToQuestionDetailsTab();

        // Submit the form after switching tabs
        document.querySelector("form").submit();
        }
        });
        });






        // Function to switch to the "question-details" tab
        function switchToQuestionDetailsTab()
        {
        // First, remove the 'active' class from the current tab
        document.querySelector('.nav-link.active').classList.remove('active');
        document.querySelector('.tab-pane.active').classList.remove('show', 'active');

        // Add the 'active' class to the "question-details" tab
        document.getElementById('question-details-tab').classList.add('active');
        document.getElementById('question-details').classList.add('show', 'active');
        }

        function validateForm()
        {

        return true;
        }

        </script>
    
</body>
</html>







