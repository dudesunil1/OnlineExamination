@model IEnumerable<OnlineExamination.Models.PublicationViewModel>

@{
    ViewBag.Title = "List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Breadcrumb Section -->
<div class="breadcrumb-with-buttons mb-4 flex-between flex-wrap gap-8">
    <div class="breadcrumb mb-4">
        <ul class="flex-align gap-4">
            <li><a href="index.html" class="text-gray-200 fw-normal text-15 hover-text-main-600">Home</a></li>
            <li><span class="text-gray-500 fw-normal d-flex"><i class="ph ph-caret-right"></i></span></li>
            <li><span class="text-main-600 fw-normal text-15">Publication Master</span></li>
        </ul>
    </div>
</div>

<!-- Card Section for Publication Table -->
<div class="card">
    <div class="card-header border-bottom border-gray-100 flex-align gap-8">
        <h5 class="mb-0">Publication Master</h5>
        <button type="button" class="text-main-600 text-md d-flex" data-bs-toggle="tooltip" data-bs-placement="top" title="Course Details">
            <i class="ph-fill ph-question"></i>
        </button>

        @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-main rounded-pill py-9" })
    </div>

    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover text-center" id="tblSuntech">
                
                <thead class="table-dark">
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Pub_Id)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Pub_Name)
                        </th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Pub_Id)</td>
                            <td>@Html.DisplayFor(modelItem => item.Pub_Name)</td>
                            <td>
                                @Html.ActionLink("Edit", "Edit", new { id = item.Pub_Id }, new { @class = "btn btn-warning btn-sm" })
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Export Section -->
<div class="d-flex justify-content-end mb-3">
    <select id="exportOptions" class="form-select w-auto">
        <option value="">Export</option>
        <option value="csv">CSV</option>
        <option value="json">JSON</option>
    </select>
</div>

<!-- Script Section -->
<script>
    // ========================== Export JS ==============================
    document.getElementById('exportOptions').addEventListener('change', function () {
        const format = this.value;
        const table = document.getElementById('tblSuntech');
        let data = [];
        const headers = [];

        // Get the table headers
        table.querySelectorAll('thead th').forEach(th => {
            headers.push(th.innerText.trim());
        });

        // Get the table rows
        table.querySelectorAll('tbody tr').forEach(tr => {
            const row = {};
            tr.querySelectorAll('td').forEach((td, index) => {
                row[headers[index]] = td.innerText.trim();
            });
            data.push(row);
        });

        if (format === 'csv') {
            downloadCSV(data);
        } else if (format === 'json') {
            downloadJSON(data);
        }
    });

    function downloadCSV(data) {
        const csv = data.map(row => Object.values(row).join(',')).join('\n');
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'publications.csv';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }

    function downloadJSON(data) {
        const json = JSON.stringify(data, null, 2);
        const blob = new Blob([json], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'publications.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }
    // ========================== Export JS End ==========================

    // Data Tables Initialization
    new DataTable('#tblSuntech', {
        searching: false,
        lengthChange: false,
        info: false,
        paging: false,
        "columnDefs": [
            { "orderable": false, "targets": [2] }
        ]
    });
</script>
